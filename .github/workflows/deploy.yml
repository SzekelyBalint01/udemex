name: Deploy to AWS EC2

on:
  workflow_run:
    workflows: ["Java CI with Maven"]
    branches: [master]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure Amazon CloudWatch Agent
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Install CloudWatch Agent
            curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

            # Create CloudWatch Agent configuration
            cat <<EOF | sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            {
              "agent": {
                      "run_as_user": "cwagent"
              },
              "logs": {
                      "logs_collected": {
                              "files": {
                                      "collect_list": [
                                          {
                                              "file_path": "/var/log/car-rent-app/car-rent-app-logs.log",
                                              "log_group_name": "car-rent-app-logs",
                                              "log_stream_name": "{instance_id}",
                                              "timezone": "UTC"
                                          }
                                    ]
                              }
                      },
                  "log_stream_name": "ec2-instance-log"
              }
            } 
            EOF
            
            
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:-c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

            # Enable CloudWatch Agent on system reboot
            sudo systemctl enable amazon-cloudwatch-agent

            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a status
            sudo useradd -r -s /sbin/nologin cloudwatch-agent-user
            sudo chown cloudwatch-agent-user:cloudwatch-agent-user /var/log/car-rent-app
            sudo chmod -R 755 /var/log/car-rent-app
            
            CONFIG_PATH="/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml"
            
            sudo mkdir -p /opt/aws/amazon-cloudwatch-agent/etc/
            
            cat <<EOF | sudo tee $CONFIG_PATH
            [agent]
            collection_jitter = "0s"
            debug = false
            flush_interval = "1s"
            flush_jitter = "0s"
            hostname = ""
            interval = "60s"
            logfile = "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
            logtarget = "lumberjack"
            metric_batch_size = 1000
            metric_buffer_limit = 10000
            omit_hostname = false
            precision = ""
            quiet = false
            round_interval = false
            
            [logs]
            logs_collected = { files = { collect_list = [
            {
            file_path = "/var/log/car-rent-app/application.log",
            log_group_name = "car-rent-app",
            log_stream_name = "{instance_id}",
            timestamp_format = "%Y-%m-%d %H:%M:%S"
            }
            ]}}
            EOF
            
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config \
            -m ec2 -c file:$CONFIG_PATH -s
            
            # Szolgáltatás újraindítása
            echo "CloudWatch Agent újraindítása..."
            sudo systemctl restart amazon-cloudwatch-agent
            
            # Státusz ellenőrzése
            echo "CloudWatch Agent státusz ellenőrzése..."
            sudo systemctl status amazon-cloudwatch-agent
            echo "CloudWatch Agent configured and started."    
        

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker and Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo snap install docker
              sudo apt-get update
              sudo apt-get upgrade
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi
          
            # Install Docker Compose if not installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo apt-get update
              sudo apt-get upgrade
            fi
          
            # Output versions for logging
            docker --version
            docker-compose --version

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.EC2_USER }}/"

      - name: Upload SQL file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ./init.sql
          target: /home/${{ secrets.EC2_USER }}/

      - name: Deploy with Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}
            sudo chmod 666 /var/run/docker.sock
            docker stop $(docker ps -aq) && docker rm $(docker ps -aq)
            docker rmi $(docker images -aq)
            docker-compose pull
            docker-compose up -d


            
